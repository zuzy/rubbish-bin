GETADDRINFO(3)                                      Linux Programmer's Manual                                      GETADDRINFO(3)

NNAAMMEE
       getaddrinfo, freeaddrinfo, gai_strerror - network address and service translation

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ssyyss//ttyyppeess..hh>>
       ##iinncclluuddee <<ssyyss//ssoocckkeett..hh>>
       ##iinncclluuddee <<nneettddbb..hh>>

       iinntt ggeettaaddddrriinnffoo((ccoonnsstt cchhaarr **_n_o_d_e,, ccoonnsstt cchhaarr **_s_e_r_v_i_c_e,,
                       ccoonnsstt ssttrruucctt aaddddrriinnffoo **_h_i_n_t_s,,
                       ssttrruucctt aaddddrriinnffoo ****_r_e_s));;

       vvooiidd ffrreeeeaaddddrriinnffoo((ssttrruucctt aaddddrriinnffoo **_r_e_s));;

       ccoonnsstt cchhaarr **ggaaii__ssttrreerrrroorr((iinntt _e_r_r_c_o_d_e));;

   Feature Test Macro Requirements for glibc (see ffeeaattuurree__tteesstt__mmaaccrrooss(7)):

       ggeettaaddddrriinnffoo(), ffrreeeeaaddddrriinnffoo(), ggaaii__ssttrreerrrroorr():
           _POSIX_C_SOURCE >= 1 || _XOPEN_SOURCE || _POSIX_SOURCE

DDEESSCCRRIIPPTTIIOONN
       Given  _n_o_d_e  and _s_e_r_v_i_c_e, which identify an Internet host and a service, ggeettaaddddrriinnffoo() returns one or more _a_d_d_r_i_n_f_o struc‐
       tures, each of which contains an Internet address that can be specified in a call to bbiinndd(2) or  ccoonnnneecctt(2).   The  ggeettaadd‐‐
       ddrriinnffoo() function combines the functionality provided by the ggeetthhoossttbbyynnaammee(3) and ggeettsseerrvvbbyynnaammee(3) functions into a single
       interface, but unlike the latter functions, ggeettaaddddrriinnffoo() is reentrant and allows programs to  eliminate  IPv4-versus-IPv6
       dependencies.

       The _a_d_d_r_i_n_f_o structure used by ggeettaaddddrriinnffoo() contains the following fields:

           struct addrinfo {
               int              ai_flags;
               int              ai_family;
               int              ai_socktype;
               int              ai_protocol;
               socklen_t        ai_addrlen;
               struct sockaddr *ai_addr;
               char            *ai_canonname;
               struct addrinfo *ai_next;
           };

       The  _h_i_n_t_s  argument  points  to an _a_d_d_r_i_n_f_o structure that specifies criteria for selecting the socket address structures
       returned in the list pointed to by _r_e_s.  If _h_i_n_t_s is not NULL it points to an _a_d_d_r_i_n_f_o structure whose _a_i___f_a_m_i_l_y, _a_i___s_o_c_k_‐
       _t_y_p_e, and _a_i___p_r_o_t_o_c_o_l specify criteria that limit the set of socket addresses returned by ggeettaaddddrriinnffoo(), as follows:

       _a_i___f_a_m_i_l_y   This  field  specifies  the  desired  address  family for the returned addresses.  Valid values for this field
                   include AAFF__IINNEETT and AAFF__IINNEETT66.  The value AAFF__UUNNSSPPEECC indicates that ggeettaaddddrriinnffoo() should return socket addresses
                   for any address family (either IPv4 or IPv6, for example) that can be used with _n_o_d_e and _s_e_r_v_i_c_e.

       _a_i___s_o_c_k_t_y_p_e This  field  specifies the preferred socket type, for example SSOOCCKK__SSTTRREEAAMM or SSOOCCKK__DDGGRRAAMM.  Specifying 0 in this
                   field indicates that socket addresses of any type can be returned by ggeettaaddddrriinnffoo().

       _a_i___p_r_o_t_o_c_o_l This field specifies the protocol for the returned socket addresses.  Specifying 0  in  this  field  indicates
                   that socket addresses with any protocol can be returned by ggeettaaddddrriinnffoo().

       _a_i___f_l_a_g_s    This field specifies additional options, described below.  Multiple flags are specified by bitwise OR-ing them
                   together.

       All the other fields in the structure pointed to by _h_i_n_t_s must contain either 0 or a null pointer, as appropriate.

       Specifying _h_i_n_t_s as NULL is equivalent to setting _a_i___s_o_c_k_t_y_p_e and _a_i___p_r_o_t_o_c_o_l to 0; _a_i___f_a_m_i_l_y to AAFF__UUNNSSPPEECC;  and  _a_i___f_l_a_g_s
       to  ((AAII__VV44MMAAPPPPEEDD || AAII__AADDDDRRCCOONNFFIIGG)).  (POSIX specifies different defaults for _a_i___f_l_a_g_s; see NOTES.)  _n_o_d_e specifies either a
       numerical network address (for IPv4, numbers-and-dots notation as supported by iinneett__aattoonn(3); for IPv6, hexadecimal  string
       format  as  supported  by  iinneett__ppttoonn(3)),  or  a network hostname, whose network addresses are looked up and resolved.  If
       _h_i_n_t_s_._a_i___f_l_a_g_s contains the AAII__NNUUMMEERRIICCHHOOSSTT flag, then _n_o_d_e must be a numerical network address.  The  AAII__NNUUMMEERRIICCHHOOSSTT  flag
       suppresses any potentially lengthy network host address lookups.

       If  the AAII__PPAASSSSIIVVEE flag is specified in _h_i_n_t_s_._a_i___f_l_a_g_s, and _n_o_d_e is NULL, then the returned socket addresses will be suit‐
       able for bbiinndd(2)ing a socket that will aacccceepptt(2) connections.  The returned socket  address  will  contain  the  "wildcard
       address" (IINNAADDDDRR__AANNYY for IPv4 addresses, IINN66AADDDDRR__AANNYY__IINNIITT for IPv6 address).  The wildcard address is used by applications
       (typically servers) that intend to accept connections on any of the hosts's network addresses.  If _n_o_d_e is not NULL,  then
       the AAII__PPAASSSSIIVVEE flag is ignored.

       If the AAII__PPAASSSSIIVVEE flag is not set in _h_i_n_t_s_._a_i___f_l_a_g_s, then the returned socket addresses will be suitable for use with ccoonn‐‐
       nneecctt(2), sseennddttoo(2), or sseennddmmssgg(2).  If _n_o_d_e is NULL, then the network address  will  be  set  to  the  loopback  interface
       address  (IINNAADDDDRR__LLOOOOPPBBAACCKK  for  IPv4 addresses, IINN66AADDDDRR__LLOOOOPPBBAACCKK__IINNIITT for IPv6 address); this is used by applications that
       intend to communicate with peers running on the same host.

       _s_e_r_v_i_c_e sets the port in each returned address structure.  If this argument is a service name  (see  sseerrvviicceess(5)),  it  is
       translated  to  the  corresponding  port number.  This argument can also be specified as a decimal number, which is simply
       converted to binary.  If _s_e_r_v_i_c_e is NULL, then the port number of the returned socket addresses will  be  left  uninitial‐
       ized.   If AAII__NNUUMMEERRIICCSSEERRVV is specified in _h_i_n_t_s_._a_i___f_l_a_g_s and _s_e_r_v_i_c_e is not NULL, then _s_e_r_v_i_c_e must point to a string con‐
       taining a numeric port number.  This flag is used to inhibit the invocation of a name resolution service in cases where it
       is known not to be required.

       Either _n_o_d_e or _s_e_r_v_i_c_e, but not both, may be NULL.

       The  ggeettaaddddrriinnffoo()  function  allocates and initializes a linked list of _a_d_d_r_i_n_f_o structures, one for each network address
       that matches _n_o_d_e and _s_e_r_v_i_c_e, subject to any restrictions imposed by _h_i_n_t_s, and returns a pointer to  the  start  of  the
       list in _r_e_s.  The items in the linked list are linked by the _a_i___n_e_x_t field.

       There  are  several  reasons why the linked list may have more than one _a_d_d_r_i_n_f_o structure, including: the network host is
       multihomed, accessible over multiple protocols (e.g., both AAFF__IINNEETT and AAFF__IINNEETT66); or the same service  is  available  from
       multiple  socket  types  (one SSOOCCKK__SSTTRREEAAMM address and another SSOOCCKK__DDGGRRAAMM address, for example).  Normally, the application
       should try using the addresses in the order in which they are returned.  The sorting function used within ggeettaaddddrriinnffoo() is
       defined  in  RFC 3484;  the  order  can be tweaked for a particular system by editing _/_e_t_c_/_g_a_i_._c_o_n_f (available since glibc
       2.5).

       If _h_i_n_t_s_._a_i___f_l_a_g_s includes the AAII__CCAANNOONNNNAAMMEE flag, then the _a_i___c_a_n_o_n_n_a_m_e field of the first of the _a_d_d_r_i_n_f_o  structures  in
       the returned list is set to point to the official name of the host.

       The remaining fields of each returned _a_d_d_r_i_n_f_o structure are initialized as follows:

       * The  _a_i___f_a_m_i_l_y,  _a_i___s_o_c_k_t_y_p_e,  and _a_i___p_r_o_t_o_c_o_l fields return the socket creation parameters (i.e., these fields have the
         same meaning as the corresponding arguments of ssoocckkeett(2)).  For example, _a_i___f_a_m_i_l_y might  return  AAFF__IINNEETT  or  AAFF__IINNEETT66;
         _a_i___s_o_c_k_t_y_p_e might return SSOOCCKK__DDGGRRAAMM or SSOOCCKK__SSTTRREEAAMM; and _a_i___p_r_o_t_o_c_o_l returns the protocol for the socket.

       * A  pointer  to  the  socket  address  is placed in the _a_i___a_d_d_r field, and the length of the socket address, in bytes, is
         placed in the _a_i___a_d_d_r_l_e_n field.

       If _h_i_n_t_s_._a_i___f_l_a_g_s includes the AAII__AADDDDRRCCOONNFFIIGG flag, then IPv4 addresses are returned in the list pointed to by _r_e_s only  if
       the local system has at least one IPv4 address configured, and IPv6 addresses are returned only if the local system has at
       least one IPv6 address configured.  The loopback address is not considered for this case as valid as a configured address.
       This flag is useful on, for example, IPv4-only systems, to ensure that ggeettaaddddrriinnffoo() does not return IPv6 socket addresses
       that would always fail in ccoonnnneecctt(2) or bbiinndd(2).

       If _h_i_n_t_s_._a_i___f_l_a_g_s specifies the AAII__VV44MMAAPPPPEEDD flag, and _h_i_n_t_s_._a_i___f_a_m_i_l_y was specified as  AAFF__IINNEETT66,  and  no  matching  IPv6
       addresses  could  be found, then return IPv4-mapped IPv6 addresses in the list pointed to by _r_e_s.  If both AAII__VV44MMAAPPPPEEDD and
       AAII__AALLLL are specified in _h_i_n_t_s_._a_i___f_l_a_g_s, then return both IPv6 and IPv4-mapped IPv6 addresses in the  list  pointed  to  by
       _r_e_s.  AAII__AALLLL is ignored if AAII__VV44MMAAPPPPEEDD is not also specified.

       The ffrreeeeaaddddrriinnffoo() function frees the memory that was allocated for the dynamically allocated linked list _r_e_s.

   EExxtteennssiioonnss ttoo ggeettaaddddrriinnffoo(()) ffoorr IInntteerrnnaattiioonnaalliizzeedd DDoommaaiinn NNaammeess
       Starting  with glibc 2.3.4, ggeettaaddddrriinnffoo() has been extended to selectively allow the incoming and outgoing hostnames to be
       transparently converted to and from the Internationalized Domain Name  (IDN)  format  (see  RFC  3490,  _I_n_t_e_r_n_a_t_i_o_n_a_l_i_z_i_n_g
       _D_o_m_a_i_n _N_a_m_e_s _i_n _A_p_p_l_i_c_a_t_i_o_n_s _(_I_D_N_A_)).  Four new flags are defined:

       AAII__IIDDNN If  this  flag  is specified, then the node name given in _n_o_d_e is converted to IDN format if necessary.  The source
              encoding is that of the current locale.

              If the input name contains non-ASCII characters, then the IDN encoding is used.   Those  parts  of  the  node  name
              (delimited  by  dots)  that  contain  non-ASCII characters are encoded using ASCII Compatible Encoding (ACE) before
              being passed to the name resolution functions.

       AAII__CCAANNOONNIIDDNN
              After a successful name lookup, and if the AAII__CCAANNOONNNNAAMMEE flag was specified, ggeettaaddddrriinnffoo() will return the canonical
              name  of  the node corresponding to the _a_d_d_r_i_n_f_o structure value passed back.  The return value is an exact copy of
              the value returned by the name resolution function.

              If the name is encoded using ACE, then it will contain the _x_n_-_- prefix for one or more components of the name.   To
              convert  these components into a readable form the AAII__CCAANNOONNIIDDNN flag can be passed in addition to AAII__CCAANNOONNNNAAMMEE.  The
              resulting string is encoded using the current locale's encoding.

       AAII__IIDDNN__AALLLLOOWW__UUNNAASSSSIIGGNNEEDD, AAII__IIDDNN__UUSSEE__SSTTDD33__AASSCCIIII__RRUULLEESS
              Setting  these  flags  will  enable  the  IDNA_ALLOW_UNASSIGNED  (allow  unassigned  Unicode   code   points)   and
              IDNA_USE_STD3_ASCII_RULES  (check  output  to  make sure it is a STD3 conforming hostname) flags respectively to be
              used in the IDNA handling.

RREETTUURRNN VVAALLUUEE
       ggeettaaddddrriinnffoo() returns 0 if it succeeds, or one of the following nonzero error codes:

       EEAAII__AADDDDRRFFAAMMIILLYY
              The specified network host does not have any network addresses in the requested address family.

       EEAAII__AAGGAAIINN
              The name server returned a temporary failure indication.  Try again later.

       EEAAII__BBAADDFFLLAAGGSS
              _h_i_n_t_s_._a_i___f_l_a_g_s contains invalid flags; or, _h_i_n_t_s_._a_i___f_l_a_g_s included AAII__CCAANNOONNNNAAMMEE and _n_a_m_e was NULL.

       EEAAII__FFAAIILL
              The name server returned a permanent failure indication.

       EEAAII__FFAAMMIILLYY
              The requested address family is not supported.

       EEAAII__MMEEMMOORRYY
              Out of memory.

       EEAAII__NNOODDAATTAA
              The specified network host exists, but does not have any network addresses defined.

       EEAAII__NNOONNAAMMEE
              The _n_o_d_e or _s_e_r_v_i_c_e is not known;  or  both  _n_o_d_e  and  _s_e_r_v_i_c_e  are  NULL;  or  AAII__NNUUMMEERRIICCSSEERRVV  was  specified  in
              _h_i_n_t_s_._a_i___f_l_a_g_s and _s_e_r_v_i_c_e was not a numeric port-number string.

       EEAAII__SSEERRVVIICCEE
              The  requested  service is not available for the requested socket type.  It may be available through another socket
              type.  For example, this error could occur if _s_e_r_v_i_c_e was "shell" (a service available only on stream sockets), and
              either  _h_i_n_t_s_._a_i___p_r_o_t_o_c_o_l was IIPPPPRROOTTOO__UUDDPP, or _h_i_n_t_s_._a_i___s_o_c_k_t_y_p_e was SSOOCCKK__DDGGRRAAMM; or the error could occur if _s_e_r_v_i_c_e
              was not NULL, and _h_i_n_t_s_._a_i___s_o_c_k_t_y_p_e was SSOOCCKK__RRAAWW (a socket type that does not support the concept of services).

       EEAAII__SSOOCCKKTTYYPPEE
              The requested socket type is not supported.  This could occur, for example, if _h_i_n_t_s_._a_i___s_o_c_k_t_y_p_e and  _h_i_n_t_s_._a_i___p_r_o_‐
              _t_o_c_o_l are inconsistent (e.g., SSOOCCKK__DDGGRRAAMM and IIPPPPRROOTTOO__TTCCPP, respectively).

       EEAAII__SSYYSSTTEEMM
              Other system error, check _e_r_r_n_o for details.

       The ggaaii__ssttrreerrrroorr() function translates these error codes to a human readable string, suitable for error reporting.

FFIILLEESS
       _/_e_t_c_/_g_a_i_._c_o_n_f

AATTTTRRIIBBUUTTEESS
       For an explanation of the terms used in this section, see aattttrriibbuutteess(7).

       ┌────────────────┬───────────────┬────────────────────┐
       │IInntteerrffaaccee       │ AAttttrriibbuuttee     │ VVaalluuee              │
       ├────────────────┼───────────────┼────────────────────┤
       │ggeettaaddddrriinnffoo()   │ Thread safety │ MT-Safe env locale │
       ├────────────────┼───────────────┼────────────────────┤
       │ffrreeeeaaddddrriinnffoo(), │ Thread safety │ MT-Safe            │
       │ggaaii__ssttrreerrrroorr()  │               │                    │
       └────────────────┴───────────────┴────────────────────┘

CCOONNFFOORRMMIINNGG TTOO
       POSIX.1-2001, POSIX.1-2008.  The ggeettaaddddrriinnffoo() function is documented in RFC 2553.

NNOOTTEESS
       ggeettaaddddrriinnffoo() supports the _a_d_d_r_e_s_s%%_s_c_o_p_e_-_i_d notation for specifying the IPv6 scope-ID.

       AAII__AADDDDRRCCOONNFFIIGG, AAII__AALLLL, and AAII__VV44MMAAPPPPEEDD are available since glibc 2.3.3.  AAII__NNUUMMEERRIICCSSEERRVV is available since glibc 2.3.4.

       According to POSIX.1, specifying _h_i_n_t_s as NULL should cause _a_i___f_l_a_g_s to be assumed  as  0.   The  GNU  C  library  instead
       assumes a value of ((AAII__VV44MMAAPPPPEEDD || AAII__AADDDDRRCCOONNFFIIGG)) for this case, since this value is considered an improvement on the spec‐
       ification.

EEXXAAMMPPLLEE
       The following programs demonstrate the use of ggeettaaddddrriinnffoo(), ggaaii__ssttrreerrrroorr(), ffrreeeeaaddddrriinnffoo(), and ggeettnnaammeeiinnffoo(3).  The pro‐
       grams are an echo server and client for UDP datagrams.

   SSeerrvveerr pprrooggrraamm

       #include <sys/types.h>
       #include <stdio.h>
       #include <stdlib.h>
       #include <unistd.h>
       #include <string.h>
       #include <sys/socket.h>
       #include <netdb.h>

       #define BUF_SIZE 500

       int
       main(int argc, char *argv[])
       {
           struct addrinfo hints;
           struct addrinfo *result, *rp;
           int sfd, s;
           struct sockaddr_storage peer_addr;
           socklen_t peer_addr_len;
           ssize_t nread;
           char buf[BUF_SIZE];

           if (argc != 2) {
               fprintf(stderr, "Usage: %s port\n", argv[0]);
               exit(EXIT_FAILURE);
           }

           memset(&hints, 0, sizeof(struct addrinfo));
           hints.ai_family = AF_UNSPEC;    /* Allow IPv4 or IPv6 */
           hints.ai_socktype = SOCK_DGRAM; /* Datagram socket */
           hints.ai_flags = AI_PASSIVE;    /* For wildcard IP address */
           hints.ai_protocol = 0;          /* Any protocol */
           hints.ai_canonname = NULL;
           hints.ai_addr = NULL;
           hints.ai_next = NULL;

           s = getaddrinfo(NULL, argv[1], &hints, &result);
           if (s != 0) {
               fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(s));
               exit(EXIT_FAILURE);
           }

           /* getaddrinfo() returns a list of address structures.
              Try each address until we successfully bind(2).
              If socket(2) (or bind(2)) fails, we (close the socket
              and) try the next address. */

           for (rp = result; rp != NULL; rp = rp->ai_next) {
               sfd = socket(rp->ai_family, rp->ai_socktype,
                       rp->ai_protocol);
               if (sfd == -1)
                   continue;

               if (bind(sfd, rp->ai_addr, rp->ai_addrlen) == 0)
                   break;                  /* Success */

               close(sfd);
           }

           if (rp == NULL) {               /* No address succeeded */
               fprintf(stderr, "Could not bind\n");
               exit(EXIT_FAILURE);
           }

           freeaddrinfo(result);           /* No longer needed */

           /* Read datagrams and echo them back to sender */

           for (;;) {
               peer_addr_len = sizeof(struct sockaddr_storage);
               nread = recvfrom(sfd, buf, BUF_SIZE, 0,
                       (struct sockaddr *) &peer_addr, &peer_addr_len);
               if (nread == -1)
                   continue;               /* Ignore failed request */

               char host[NI_MAXHOST], service[NI_MAXSERV];

               s = getnameinfo((struct sockaddr *) &peer_addr,
                               peer_addr_len, host, NI_MAXHOST,
                               service, NI_MAXSERV, NI_NUMERICSERV);
              if (s == 0)
                   printf("Received %zd bytes from %s:%s\n",
                           nread, host, service);
               else
                   fprintf(stderr, "getnameinfo: %s\n", gai_strerror(s));

               if (sendto(sfd, buf, nread, 0,
                           (struct sockaddr *) &peer_addr,
                           peer_addr_len) != nread)
                   fprintf(stderr, "Error sending response\n");
           }
       }

   CClliieenntt pprrooggrraamm

       #include <sys/types.h>
       #include <sys/socket.h>
       #include <netdb.h>
       #include <stdio.h>
       #include <stdlib.h>
       #include <unistd.h>
       #include <string.h>

       #define BUF_SIZE 500

       int
       main(int argc, char *argv[])
       {
           struct addrinfo hints;
           struct addrinfo *result, *rp;
           int sfd, s, j;
           size_t len;
           ssize_t nread;
           char buf[BUF_SIZE];

           if (argc < 3) {
               fprintf(stderr, "Usage: %s host port msg...\n", argv[0]);
               exit(EXIT_FAILURE);
           }

           /* Obtain address(es) matching host/port */

           memset(&hints, 0, sizeof(struct addrinfo));
           hints.ai_family = AF_UNSPEC;    /* Allow IPv4 or IPv6 */
           hints.ai_socktype = SOCK_DGRAM; /* Datagram socket */
           hints.ai_flags = 0;
           hints.ai_protocol = 0;          /* Any protocol */

           s = getaddrinfo(argv[1], argv[2], &hints, &result);
           if (s != 0) {
               fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(s));
               exit(EXIT_FAILURE);
           }

           /* getaddrinfo() returns a list of address structures.
              Try each address until we successfully connect(2).
              If socket(2) (or connect(2)) fails, we (close the socket
              and) try the next address. */

           for (rp = result; rp != NULL; rp = rp->ai_next) {
               sfd = socket(rp->ai_family, rp->ai_socktype,
                            rp->ai_protocol);
               if (sfd == -1)
                   continue;

               if (connect(sfd, rp->ai_addr, rp->ai_addrlen) != -1)
                   break;                  /* Success */

               close(sfd);
           }

           if (rp == NULL) {               /* No address succeeded */
               fprintf(stderr, "Could not connect\n");
               exit(EXIT_FAILURE);
           }

           freeaddrinfo(result);           /* No longer needed */

           /* Send remaining command-line arguments as separate
              datagrams, and read responses from server */

           for (j = 3; j < argc; j++) {
               len = strlen(argv[j]) + 1;
                       /* +1 for terminating null byte */

               if (len + 1 > BUF_SIZE) {
                   fprintf(stderr,
                           "Ignoring long message in argument %d\n", j);
                   continue;
               }

               if (write(sfd, argv[j], len) != len) {
                   fprintf(stderr, "partial/failed write\n");
                   exit(EXIT_FAILURE);
               }

               nread = read(sfd, buf, BUF_SIZE);
               if (nread == -1) {
                   perror("read");
                   exit(EXIT_FAILURE);
               }

               printf("Received %zd bytes: %s\n", nread, buf);
           }

           exit(EXIT_SUCCESS);
       }

SSEEEE AALLSSOO
       ggeettaaddddrriinnffoo__aa(3), ggeetthhoossttbbyynnaammee(3), ggeettnnaammeeiinnffoo(3), iinneett(3), ggaaii..ccoonnff(5), hhoossttnnaammee(7), iipp(7)

CCOOLLOOPPHHOONN
       This page is part of release 4.04 of the Linux _m_a_n_-_p_a_g_e_s project.  A description of the project, information about report‐
       ing bugs, and the latest version of this page, can be found at http://www.kernel.org/doc/man-pages/.

GNU                                                         2015-07-23                                             GETADDRINFO(3)
